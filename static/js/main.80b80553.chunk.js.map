{"version":3,"sources":["getWeb3.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","async","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","OutlinedCard","address","balance","actions","erc721Status","classes","Card","className","variant","CardContent","Typography","component","undefined","isAdminLocked","isOwnerLocked","CardActions","map","index","value","disclaimer","props","style","padding","Button","key","color","App","state","tokenId","accounts","contract","bankBalance","ownerBalance","ERC721ContractAddress","isBankAdmin","isERC721Owner","deployedNetworkIds","id","bankAddress","nftAddress","BankContract","networks","NFTContract","componentDidMount","eth","getAccounts","net","getId","networkId","BankInstance","Contract","abi","NFTInstance","methods","_owner","call","bankAdminAddress","ownerOf","nftOwnerAddress","newState","setState","alert","error","getERC721Owner","utils","isAddress","result","ownerAddress","getERC721BalanceOf","ERC721Instance","ERC721Contract","balanceOf","handleTokenIdInput","event","Number","target","updateNFTBankStatus","handleERC721ContractAddress","mintToken","owner","send","from","gas","mintResponse","withdraw","safeTransferFrom","_address","bankResponse","deposit","safeTransferResponse","updateTokenCount","getIsAdminLocked","getIsOwnerLocked","erc721Owner","lockUnlock","contractMethod","lockUnlockResponse","ownerLock","ownerUnlock","adminLock","adminUnlock","adminCollateralize","to","adminCollateralizeResponse","this","AccountCardProps","NFTCardProps","onClick","BankCardProps","filter","Boolean","AdminCardProps","TextField","label","InputLabelProps","shrink","onChange","Grid","container","justify","spacing","item","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80b80553.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard({ title, address, balance, actions, erc721Status }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card} variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Address\n          <br />\n          {address}\n        </Typography>\n        {\n          balance !== undefined ?\n          <Typography variant=\"body2\" component=\"p\">\n            Balance\n            <br />\n            {balance}\n          </Typography>\n          : null\n        }\n        {\n          erc721Status !== undefined ?\n          <Typography variant=\"body2\" component=\"p\">\n            Admin Status : {erc721Status.isAdminLocked ? 'locked' : 'unlocked'}\n            <br />\n            NFT owner Status : {erc721Status.isOwnerLocked ? 'locked' : 'unlocked'}\n          </Typography>\n          : null\n        }\n      </CardContent>\n      <CardActions>\n        {actions && actions.map(({value, disclaimer, ...props}, index) => {\n          return (\n            <div style={{ padding: 10 }}>\n              <Button key={index} {...props} variant=\"outlined\" color=\"primary\">{value}</Button>\n              <Typography variant=\"caption\" component=\"p\">\n                {disclaimer}\n              </Typography>\n            </div>\n          )\n        })}\n      </CardActions>\n    </Card>\n  );\n}","import React, { Component } from \"react\";\nimport BankContract from \"./contracts/bank.json\";\nimport NFTContract from \"./contracts/NFToken.json\";\nimport ERC721Contract from \"./contracts/ERC721.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport \"./App.css\";\n\nimport Card from './components/Card'\n\nconst gas = 5000000\nconst ROPSTEN = 3 // network id\n\nclass App extends Component {\n  state = {\n    tokenId: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    bankBalance: 0,\n    ownerBalance: 0,\n    ERC721ContractAddress: null,\n    isAdminLocked: false,\n    isOwnerLocked: false,\n    isBankAdmin: false,\n    isERC721Owner: false\n  }\n\n  deployedNetworkIds = (id) => {\n    if(ROPSTEN === id) {\n      return {\n        bankAddress: '0xDC8f79324b4f40c5c93A0D6969FFd204C0650C11',\n        nftAddress: '0xfeca45c514F52e43d0171b4a755EDB5f2E6AF445'\n      }\n    } else {\n      return {\n        bankAddress: BankContract.networks[id].address,\n        nftAddress: NFTContract.networks[id].address\n      }\n    }\n  }\n\n  /**\n   * Instanciate new contracts like Dummy NFT & BANK\n   */\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const bankAddress = this.deployedNetworkIds(networkId).bankAddress\n      const nftAddress = this.deployedNetworkIds(networkId).nftAddress\n    \n      const BankInstance = new web3.eth.Contract(\n        BankContract.abi,\n        bankAddress,\n      );\n      const NFTInstance = new web3.eth.Contract(\n        NFTContract.abi,\n        nftAddress,\n      );\n\n      const bankAdminAddress = await BankInstance.methods._owner().call()\n      const isBankAdmin = bankAdminAddress === accounts[0]\n\n      const nftOwnerAddress = await BankInstance.methods.ownerOf(nftAddress, this.state.tokenId).call()\n      const isERC721Owner = nftOwnerAddress === accounts[0]\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      const newState = { web3, accounts, BankInstance, NFTInstance, ERC721ContractAddress: nftAddress, bankAdminAddress, isBankAdmin, isERC721Owner }\n      console.log(newState)\n      this.setState(newState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  getERC721Owner = async () => {\n    const { web3, BankInstance, ERC721ContractAddress, tokenId } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    let result = null;\n    try {\n      result = await BankInstance.methods.ownerOf(ERC721ContractAddress, tokenId).call()\n      console.log({ownerAddress: result, tokenId})\n    } catch (error) {\n      console.log(error)\n    }\n    return result\n  }\n\n  /**\n   * dynamically fetch how many NFTs current wallet account has\n   */\n  getERC721BalanceOf = async (address) => {\n    const { web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n    \n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    let result = null;\n    try {\n      result = await ERC721Instance.methods.balanceOf(address).call()\n      console.log({address, balanceOf: result})\n    } catch (error) {\n      console.log(error)\n    }\n    return result\n  }\n  \n  handleTokenIdInput = (event) => {\n    this.setState({ tokenId: Number(event.target.value)}, () => {\n      this.updateNFTBankStatus()\n    })\n  }\n\n  handleERC721ContractAddress = (event) => {\n    this.setState({ ERC721ContractAddress: event.target.value})\n  }\n\n  /**\n   * Example for minting a token for deposit it later in bank\n   */\n  mintToken = async () => {\n    const { NFTInstance, accounts, tokenId } = this.state\n    const owner = accounts[0]\n    try {\n      const mintResponse = await NFTInstance.methods.mintToken(owner, tokenId).send({ from: owner, gas })\n      console.log({mintResponse})\n      // const safeTransferResponse = await ERC721Instance.methods.safeTransferFrom(owner, BankInstance._address, tokenId).send({ from: owner })\n      // console.log({safeTransferResponse})\n    } catch (error) {\n      console.log(error)\n    }\n    this.updateNFTBankStatus()\n  }\n\n  /**\n   * Withdraw NFT token from bank contract\n   */\n  withdraw = async () => {\n    const { BankInstance, accounts, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    const owner = accounts[0]\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    const bankResponse = await BankInstance.methods.safeTransferFrom(ERC721Instance._address, owner, owner, tokenId, '0x0a').send({ from: owner, gas })\n    console.log({bankResponse})\n\n    this.updateNFTBankStatus()\n  }\n\n  /**\n   * Bank deposit NFT token from provided contract address\n   */\n  deposit = async () => {\n    const { BankInstance, accounts, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n    \n    const owner = accounts[0]\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    const safeTransferResponse = await ERC721Instance.methods.safeTransferFrom(owner, BankInstance._address, tokenId).send({ from: owner, gas })\n    console.log({safeTransferResponse})\n\n    this.updateNFTBankStatus()\n  }\n\n  /**\n   * Update UI balance number\n   */\n  updateTokenCount = async () => {\n    const { BankInstance, accounts } = this.state\n    const owner = accounts[0]\n    const bankBalance = await this.getERC721BalanceOf(BankInstance._address)\n    const ownerBalance = await this.getERC721BalanceOf(owner)\n    console.log({bankBalance, ownerBalance})\n    this.setState({bankBalance, ownerBalance})\n  }\n\n  /**\n   * SC Bank - check if admin locked\n   */\n  getIsAdminLocked = async () => {\n    const { BankInstance, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n    \n    const isAdminLocked = await BankInstance.methods.isAdminLocked(ERC721ContractAddress, tokenId).call()\n    console.log({isAdminLocked, tokenId})\n    return isAdminLocked\n  }\n  \n  /**\n   * SC Bank - check if owneer locked\n   */\n  getIsOwnerLocked = async () => {\n    const { BankInstance, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    const isOwnerLocked = await BankInstance.methods.isOwnerLocked(ERC721ContractAddress, tokenId).call()\n    console.log({isOwnerLocked, tokenId})\n    return isOwnerLocked\n  }\n  \n  updateNFTBankStatus = async () => {\n    this.updateTokenCount()\n    const isAdminLocked = await this.getIsAdminLocked()\n    const isOwnerLocked = await this.getIsOwnerLocked()\n    const erc721Owner = await this.getERC721Owner()\n    const isERC721Owner = erc721Owner === this.state.accounts[0]\n    \n    this.setState({ isAdminLocked, isOwnerLocked, isERC721Owner })\n  }\n\n  /**\n   * Refactored function to call a Bank method. only works for lock & unlock features\n   */\n  lockUnlock = async (contractMethod) => {\n    const { accounts, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    const owner = accounts[0]\n    const lockUnlockResponse = await contractMethod(ERC721ContractAddress, tokenId).send({ from: owner, gas })\n    console.log({lockUnlockResponse})\n  }\n\n  /**\n   * New owner lock token feature\n   * - owner locks\n   * - later admin locks\n   */\n  ownerLock = async () => {\n    const { BankInstance } = this.state\n    await this.lockUnlock(BankInstance.methods.ownerLock)\n    this.updateNFTBankStatus()\n  }\n\n  ownerUnlock = async () => {\n    const { BankInstance } = this.state\n    await this.lockUnlock(BankInstance.methods.ownerUnlock)\n    this.updateNFTBankStatus()\n  }\n\n  /**\n   * New admin lock token feature\n   * - owner locks\n   * - later admin locks\n   */\n  adminLock = async () => {\n    const { BankInstance } = this.state\n    await this.lockUnlock(BankInstance.methods.adminLock)\n    this.updateNFTBankStatus()\n  }\n\n  adminUnlock = async () => {\n    const { BankInstance } = this.state\n    await this.lockUnlock(BankInstance.methods.adminUnlock)\n    this.updateNFTBankStatus()\n  }\n\n  /**\n   * With this SC bank admin can withdraw NFTs in case of defaulting\n   */\n  adminCollateralize = async (to) => {\n    const { accounts, BankInstance, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    const owner = accounts[0]\n    const adminCollateralizeResponse = await BankInstance.methods.adminCollateralize(ERC721ContractAddress, to,  tokenId, '0x0a').send({ from: owner, gas })\n    console.log({adminCollateralizeResponse})\n    this.updateNFTBankStatus()\n  }\n\n  render() {\n    const { web3, tokenId, isAdminLocked, isOwnerLocked, bankAdminAddress, isBankAdmin, isERC721Owner } = this.state\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const AccountCardProps = {\n      title: 'Personal Wallet',\n      address: this.state.accounts[0],\n      balance: this.state.ownerBalance\n    }\n    const NFTCardProps = {\n      title: 'Dummy NFT(ERC721) Contract',\n      address: this.state.NFTInstance._address,\n      actions: [\n        {\n          value: 'Mint token',\n          onClick: this.mintToken\n        }\n      ]\n    }\n\n    const BankCardProps = {\n      title: 'Rocket Contract',\n      address: this.state.BankInstance._address,\n      balance: this.state.bankBalance,\n      erc721Status: { isAdminLocked, isOwnerLocked },\n      actions: [\n        {\n          value: 'Deposit',\n          onClick: this.deposit\n        },\n        {\n          value: 'Withdraw',\n          onClick: this.withdraw\n        },\n        isERC721Owner ? {\n          value: isOwnerLocked ? `Cancel loan process Id: ${tokenId}` : `Start a loan process Id: ${tokenId}`,\n          disclaimer: isOwnerLocked ? '' : 'by clicking this button, you agree to lock your NFT(s)',\n          onClick: isOwnerLocked ? this.ownerUnlock : this.ownerLock\n        } : null\n      ].filter(Boolean)\n    }\n\n    const AdminCardProps = {\n      title: 'Rocket Admin',\n      address: bankAdminAddress,\n      actions: [\n        {\n          value: isAdminLocked ? `Admin Unlock Id: ${tokenId}` : `Admin lock Id: ${tokenId}`,\n          onClick: isAdminLocked ? this.adminUnlock : this.adminLock\n        }\n      ]\n    }\n\n    return (\n      <div className=\"App\">\n        <h2>MVP Rocket</h2>\n        <p>\n          Try changing the Token ID {this.state.tokenId} (number) and click mint, see Personal balance +1.\n        </p>\n        <p>\n          Keep the same Token ID {this.state.tokenId} and click Deposit to deposit this NFT token on Rocket contract.\n        </p>\n        <p>\n          Last, click Withdraw to transfer NFT token {this.state.tokenId} from Rocket contract to Personal wallet\n        </p>\n        <p>\n          Editable field ERC721 Contract Address for third party contracts\n        </p>\n        <p>\n          After deposit, start a loan process with NFT token on Rocket contract, then admin will lock your token\n        </p>\n        <TextField\n          id=\"filled-full-width\"\n          label=\"Token ID\"\n          style={{ margin: 8 }}\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"filled\"\n          onChange={this.handleTokenIdInput}\n          value={this.state.tokenId}\n        />\n        <TextField\n          id=\"filled-full-width\"\n          label=\"ERC721 Contract Address\"\n          style={{ margin: 8 }}\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"filled\"\n          onChange={this.handleERC721ContractAddress}\n          value={this.state.ERC721ContractAddress}\n        />\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid item>\n            <Card {...AccountCardProps}/>\n          </Grid>\n          <Grid item>\n            <Card {...NFTCardProps}/>\n          </Grid>\n          <Grid item>\n            <Card {...BankCardProps}/>\n          </Grid>\n          {\n            isBankAdmin ? \n            <Grid item>\n              <Card {...AdminCardProps}/>\n            </Grid>\n            : null\n          }\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}