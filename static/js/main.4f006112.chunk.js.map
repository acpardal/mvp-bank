{"version":3,"sources":["getWeb3.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","web3","provider","Web3","providers","HttpProvider","console","log","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","OutlinedCard","address","balance","actions","classes","Card","className","variant","CardContent","Typography","component","undefined","CardActions","map","index","value","props","Button","key","color","gas","ROPSTEN","App","state","tokenId","accounts","contract","bankBalance","ownerBalance","ERC721ContractAddress","deployedNetworkIds","id","bankAddress","nftAddress","BankContract","networks","NFTContract","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","NFTdeployedNetwork","BankInstance","Contract","abi","NFTInstance","newState","_address","setState","alert","error","getNftBalanceOf","utils","isAddress","ERC721Instance","ERC721Contract","result","methods","balanceOf","call","handleTokenIdInput","event","Number","target","handleERC721ContractAddress","mintToken","owner","send","from","mintResponse","updateTokenCount","withdraw","safeTransferFrom","bankResponse","deposit","safeTransferResponse","this","AccountCardProps","NFTCardProps","onClick","bankCardProps","TextField","label","style","InputLabelProps","shrink","onChange","Grid","container","justify","spacing","item","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m0krBAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,gCAAAC,EAAA,6EAQ1BJ,EAAQK,GARkB,gDAU1BJ,EAAO,EAAD,IAVoB,gCAsBtBK,EAAW,IAAIC,IAAKC,UAAUC,aAClC,yBAEIJ,EAAO,IAAIE,IAAKD,GACtBI,QAAQC,IAAI,gDACZX,EAAQK,GA3BoB,8D,iFCG9BO,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,EAAT,GAA6D,IAArCJ,EAAoC,EAApCA,MAAOK,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACxDC,EAAUhB,IAEhB,OACE,kBAACiB,EAAA,EAAD,CAAMC,UAAWF,EAAQd,KAAMiB,QAAQ,YACrC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,QAAQ,KAAKG,UAAU,MAChCd,GAEH,kBAACa,EAAA,EAAD,CAAYF,QAAQ,QAAQG,UAAU,KAAtC,UAEE,6BACCT,QAGWU,IAAZT,EACA,kBAACO,EAAA,EAAD,CAAYF,QAAQ,QAAQG,UAAU,KAAtC,UAEE,6BACCR,GAED,MAGN,kBAACU,EAAA,EAAD,KACGT,GAAWA,EAAQU,KAAI,WAAoBC,GAApB,IAAEC,EAAF,EAAEA,MAAUC,EAAZ,gCAA8B,kBAACC,EAAA,EAAD,eAAQC,IAAKJ,GAAWE,EAAxB,CAA+BT,QAAQ,WAAWY,MAAM,YAAWJ,QCpCjI,IAAMK,EAAM,IACNC,EAAU,EAiPDC,E,2MA9ObC,MAAQ,CACNC,QAAS,EACT3C,KAAM,KACN4C,SAAU,KACVC,SAAU,KACVC,YAAa,EACbC,aAAc,EACdC,sBAAuB,M,EAGzBC,mBAAqB,SAACC,GACpB,OAAGV,IAAYU,EACN,CACLC,YAAa,6CACbC,WAAY,8CAGP,CACLD,YAAaE,EAAaC,SAASJ,GACnCE,WAAYG,EAAYD,SAASJ,K,EAKvCM,kB,sBAAoB,0CAAAzD,EAAA,+EAGGN,IAHH,cAGVO,EAHU,gBAMOA,EAAKyD,IAAIC,cANhB,cAMVd,EANU,gBASQ5C,EAAKyD,IAAIE,IAAIC,QATrB,OASVC,EATU,OAUVC,EAAkB,EAAKb,mBAAmBY,GAAWV,YACrDY,EAAqB,EAAKd,mBAAmBY,GAAWT,WAExDY,EAAe,IAAIhE,EAAKyD,IAAIQ,SAChCZ,EAAaa,IACbJ,GAAmBA,EAAgB1C,SAE/B+C,EAAc,IAAInE,EAAKyD,IAAIQ,SAC/BV,EAAYW,IACZH,GAAsBA,EAAmB3C,SAKrCgD,EAAW,CAAEpE,OAAM4C,WAAUoB,eAAcG,cAAanB,sBAAuBmB,EAAYE,UACjGhE,QAAQC,IAAI8D,GACZ,EAAKE,SAASF,GA1BE,kDA6BhBG,MAAM,0EAGNlE,QAAQmE,MAAR,MAhCgB,0D,EAoCpBC,gB,uCAAkB,WAAOrD,GAAP,uBAAArB,EAAA,2DACwB,EAAK2C,MAArC1C,EADQ,EACRA,KAAMgD,EADE,EACFA,sBACVhD,EAAK0E,MAAMC,UAAU3B,GAFT,uBAGduB,MAAM,mBAAoBvB,GAHZ,iCAOV4B,EAAiB,IAAI5E,EAAKyD,IAAIQ,SAClCY,EAAeX,IACflB,GAEE8B,EAAS,KAXG,kBAaCF,EAAeG,QAAQC,UAAU5D,GAAS6D,OAb3C,OAadH,EAbc,OAcdzE,QAAQC,IAAI,CAACc,UAAS4D,UAAWF,IAdnB,kDAgBdzE,QAAQC,IAAR,MAhBc,iCAkBTwE,GAlBS,0D,wDAqBlBI,mBAAqB,SAACC,GACpB,EAAKb,SAAS,CAAE3B,QAASyC,OAAOD,EAAME,OAAOnD,U,EAG/CoD,4BAA8B,SAACH,GAC7B,EAAKb,SAAS,CAAEtB,sBAAuBmC,EAAME,OAAOnD,S,EAGtDqD,U,sBAAY,sCAAAxF,EAAA,+DACiC,EAAK2C,MAAxCyB,EADE,EACFA,YAAavB,EADX,EACWA,SAAUD,EADrB,EACqBA,QACzB6C,EAAQ5C,EAAS,GAFb,kBAImBuB,EAAYY,QAAQQ,UAAUC,EAAO7C,GAAS8C,KAAK,CAAEC,KAAMF,EAAOjD,QAJrF,OAIFoD,EAJE,OAKRtF,QAAQC,IAAI,CAACqF,iBALL,gDASRtF,QAAQC,IAAR,MATQ,QAWV,EAAKsF,mBAXK,yD,EAcZC,S,sBAAW,4CAAA9F,EAAA,2DACgE,EAAK2C,MAAtEsB,EADC,EACDA,aAAcpB,EADb,EACaA,SAAUD,EADvB,EACuBA,QAAS3C,EADhC,EACgCA,KAAMgD,EADtC,EACsCA,sBAC3ChD,EAAK0E,MAAMC,UAAU3B,GAFhB,uBAGPuB,MAAM,mBAAoBvB,GAHnB,iCAOHwC,EAAQ5C,EAAS,GACjBgC,EAAiB,IAAI5E,EAAKyD,IAAIQ,SAClCY,EAAeX,IACflB,GAVO,SAYkBgB,EAAae,QAAQe,iBAAiBlB,EAAeP,SAAUmB,EAAOA,EAAO7C,EAAS,QAAQ8C,KAAK,CAAEC,KAAMF,EAAOjD,QAZpI,OAYHwD,EAZG,OAaT1F,QAAQC,IAAI,CAACyF,iBAEb,EAAKH,mBAfI,4C,EAkBXI,Q,sBAAU,4CAAAjG,EAAA,2DACiE,EAAK2C,MAAtEsB,EADA,EACAA,aAAcpB,EADd,EACcA,SAAUD,EADxB,EACwBA,QAAS3C,EADjC,EACiCA,KAAMgD,EADvC,EACuCA,sBAC3ChD,EAAK0E,MAAMC,UAAU3B,GAFjB,uBAGNuB,MAAM,mBAAoBvB,GAHpB,iCAOFwC,EAAQ5C,EAAS,GACjBgC,EAAiB,IAAI5E,EAAKyD,IAAIQ,SAClCY,EAAeX,IACflB,GAVM,SAY2B4B,EAAeG,QAAQe,iBAAiBN,EAAOxB,EAAaK,SAAU1B,GAAS8C,KAAK,CAAEC,KAAMF,EAAOjD,QAZ9H,OAYF0D,EAZE,OAaR5F,QAAQC,IAAI,CAAC2F,yBAEb,EAAKL,mBAfG,4C,EAkBVA,iB,sBAAmB,sCAAA7F,EAAA,+DACkB,EAAK2C,MAAhCsB,EADS,EACTA,aAAcpB,EADL,EACKA,SAChB4C,EAAQ5C,EAAS,GAFN,SAGS,EAAK6B,gBAAgBT,EAAaK,UAH3C,cAGXvB,EAHW,gBAIU,EAAK2B,gBAAgBe,GAJ/B,OAIXzC,EAJW,OAKjB1C,QAAQC,IAAI,CAACwC,cAAaC,iBAC1B,EAAKuB,SAAS,CAACxB,cAAaC,iBANX,4C,wEAUjB,IAAKmD,KAAKxD,MAAM1C,KACd,OAAO,wEAGT,IAAMmG,EAAmB,CACvBpF,MAAO,kBACPK,QAAS8E,KAAKxD,MAAME,SAAS,GAC7BvB,QAAS6E,KAAKxD,MAAMK,cAEhBqD,EAAe,CACnBrF,MAAO,6BACPK,QAAS8E,KAAKxD,MAAMyB,YAAYE,SAChC/C,QAAS,CACP,CACEY,MAAO,aACPmE,QAASH,KAAKX,aAIde,EAAgB,CACpBvF,MAAO,gBACPK,QAAS8E,KAAKxD,MAAMsB,aAAaK,SACjChD,QAAS6E,KAAKxD,MAAMI,YACpBxB,QAAS,CACP,CACEY,MAAO,UACPmE,QAASH,KAAKF,SAEhB,CACE9D,MAAO,WACPmE,QAASH,KAAKL,YAIpB,OACE,yBAAKpE,UAAU,OACb,2CACA,wDAC6ByE,KAAKxD,MAAMC,QADxC,sDAGA,qDAC0BuD,KAAKxD,MAAMC,QADrC,kEAGA,yEAC8CuD,KAAKxD,MAAMC,QADzD,0CAGA,+FAGA,kBAAC4D,EAAA,EAAD,CACErD,GAAG,oBACHsD,MAAM,WACNC,MAAO,CAAE5F,OAAQ,GACjBA,OAAO,SACP6F,gBAAiB,CACfC,QAAQ,GAEVjF,QAAQ,SACRkF,SAAUV,KAAKhB,mBACfhD,MAAOgE,KAAKxD,MAAMC,UAEpB,kBAAC4D,EAAA,EAAD,CACErD,GAAG,oBACHsD,MAAM,0BACNC,MAAO,CAAE5F,OAAQ,GACjBA,OAAO,SACP6F,gBAAiB,CACfC,QAAQ,GAEVjF,QAAQ,SACRkF,SAAUV,KAAKZ,4BACfpD,MAAOgE,KAAKxD,MAAMM,wBAEpB,kBAAC6D,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACxC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,EAASd,IAEZ,kBAACU,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,EAASb,IAEZ,kBAACS,EAAA,EAAD,CAAMI,MAAI,GACR,kBAAC,EAASX,U,GAvOJY,aCLEC,QACW,cAA7BtH,OAAOuH,SAASC,UAEe,UAA7BxH,OAAOuH,SAASC,UAEhBxH,OAAOuH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f006112.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (false && window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (false && window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function OutlinedCard({ title, address, balance, actions }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card} variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Address\n          <br />\n          {address}\n        </Typography>\n        {\n          balance !== undefined ?\n          <Typography variant=\"body2\" component=\"p\">\n            Balance\n            <br />\n            {balance}\n          </Typography>\n          : null\n        }\n      </CardContent>\n      <CardActions>\n        {actions && actions.map(({value, ...props}, index) => <Button key={index} {...props} variant=\"outlined\" color=\"primary\">{value}</Button>)}\n      </CardActions>\n    </Card>\n  );\n}","import React, { Component } from \"react\";\nimport BankContract from \"./contracts/bank.json\";\nimport NFTContract from \"./contracts/NFToken.json\";\nimport ERC721Contract from \"./contracts/ERC721.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport \"./App.css\";\n\nimport Card from './components/Card'\n\nconst gas = 5000000\nconst ROPSTEN = 3 // network id\n\nclass App extends Component {\n  state = {\n    tokenId: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    bankBalance: 0,\n    ownerBalance: 0,\n    ERC721ContractAddress: null\n  };\n\n  deployedNetworkIds = (id) => {\n    if(ROPSTEN === id) {\n      return {\n        bankAddress: '0x0ab83D15191aF787E7A2ce0af48B008a93cda6A4',\n        nftAddress: '0x4d60e17365a11207A21ebd854115E2c49769c553'\n      }\n    } else {\n      return {\n        bankAddress: BankContract.networks[id],\n        nftAddress: NFTContract.networks[id]\n      }\n    }\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = this.deployedNetworkIds(networkId).bankAddress\n      const NFTdeployedNetwork = this.deployedNetworkIds(networkId).nftAddress\n    \n      const BankInstance = new web3.eth.Contract(\n        BankContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      const NFTInstance = new web3.eth.Contract(\n        NFTContract.abi,\n        NFTdeployedNetwork && NFTdeployedNetwork.address,\n      );\n      \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      const newState = { web3, accounts, BankInstance, NFTInstance, ERC721ContractAddress: NFTInstance._address }\n      console.log(newState)\n      this.setState(newState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  getNftBalanceOf = async (address) => {\n    const { web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n    \n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    let result = null;\n    try {\n      result = await ERC721Instance.methods.balanceOf(address).call()\n      console.log({address, balanceOf: result})\n    } catch (error) {\n      console.log(error)\n    }\n    return result\n  }\n  \n  handleTokenIdInput = (event) => {\n    this.setState({ tokenId: Number(event.target.value)})\n  }\n\n  handleERC721ContractAddress = (event) => {\n    this.setState({ ERC721ContractAddress: event.target.value})\n  }\n\n  mintToken = async () => {\n    const { NFTInstance, accounts, tokenId } = this.state\n    const owner = accounts[0]\n    try {\n      const mintResponse = await NFTInstance.methods.mintToken(owner, tokenId).send({ from: owner, gas })\n      console.log({mintResponse})\n      // const safeTransferResponse = await ERC721Instance.methods.safeTransferFrom(owner, BankInstance._address, tokenId).send({ from: owner })\n      // console.log({safeTransferResponse})\n    } catch (error) {\n      console.log(error)\n    }\n    this.updateTokenCount()\n  }\n\n  withdraw = async () => {\n    const { BankInstance, accounts, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n\n    const owner = accounts[0]\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    const bankResponse = await BankInstance.methods.safeTransferFrom(ERC721Instance._address, owner, owner, tokenId, '0x0a').send({ from: owner, gas })\n    console.log({bankResponse})\n\n    this.updateTokenCount()\n  }\n\n  deposit = async () => {\n    const { BankInstance, accounts, tokenId, web3, ERC721ContractAddress } = this.state\n    if(!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert('Invalid address '+ ERC721ContractAddress)\n      return\n    }\n    \n    const owner = accounts[0]\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress,\n    );\n    const safeTransferResponse = await ERC721Instance.methods.safeTransferFrom(owner, BankInstance._address, tokenId).send({ from: owner, gas })\n    console.log({safeTransferResponse})\n\n    this.updateTokenCount()\n  }\n\n  updateTokenCount = async () => {\n    const { BankInstance, accounts } = this.state\n    const owner = accounts[0]\n    const bankBalance = await this.getNftBalanceOf(BankInstance._address)\n    const ownerBalance = await this.getNftBalanceOf(owner)\n    console.log({bankBalance, ownerBalance})\n    this.setState({bankBalance, ownerBalance})\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const AccountCardProps = {\n      title: 'Personal Wallet',\n      address: this.state.accounts[0],\n      balance: this.state.ownerBalance\n    }\n    const NFTCardProps = {\n      title: 'Dummy NFT(ERC721) Contract',\n      address: this.state.NFTInstance._address,\n      actions: [\n        {\n          value: 'Mint token',\n          onClick: this.mintToken\n        }\n      ]\n    }\n    const bankCardProps = {\n      title: 'Bank Contract',\n      address: this.state.BankInstance._address,\n      balance: this.state.bankBalance,\n      actions: [\n        {\n          value: 'Deposit',\n          onClick: this.deposit\n        },\n        {\n          value: 'Withdraw',\n          onClick: this.withdraw\n        }\n      ]\n    }\n    return (\n      <div className=\"App\">\n        <h2>MVP Banking</h2>\n        <p>\n          Try changing the Token ID {this.state.tokenId} (number) and click mint, see Personal balance +1.\n        </p>\n        <p>\n          Keep the same Token ID {this.state.tokenId} and click Deposit to deposit this NFT token on Bank contract.\n        </p>\n        <p>\n          Last, click Withdraw to transfer NFT token {this.state.tokenId} from Bank contract to Personal wallet\n        </p>\n        <p>\n          Editable field ERC721 Contract Address for third party contracts\n        </p>\n        <TextField\n          id=\"filled-full-width\"\n          label=\"Token ID\"\n          style={{ margin: 8 }}\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"filled\"\n          onChange={this.handleTokenIdInput}\n          value={this.state.tokenId}\n        />\n        <TextField\n          id=\"filled-full-width\"\n          label=\"ERC721 Contract Address\"\n          style={{ margin: 8 }}\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"filled\"\n          onChange={this.handleERC721ContractAddress}\n          value={this.state.ERC721ContractAddress}\n        />\n        <Grid container justify=\"center\" spacing={2}>\n          <Grid item>\n            <Card {...AccountCardProps}/>\n          </Grid>\n          <Grid item>\n            <Card {...NFTCardProps}/>\n          </Grid>\n          <Grid item>\n            <Card {...bankCardProps}/>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}