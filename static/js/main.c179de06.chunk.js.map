{"version":3,"sources":["getWeb3.js","components/Nav2.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","async","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","ButtonAppBar","props","handleScroll","document","body","scrollTop","documentElement","styleHold","getElementById","style","background","paddingTop","styleHold1","componentDidMount","str","textContent","match","fin","length","handleOpen","setState","open","handleClose","state","this","address","balance","AppBar","id","position","boxShadow","Toolbar","Grid","container","item","xs","Button","variant","className","onClick","src","alt","height","Dialog","onClose","aria-labelledby","padding","Component","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","OutlinedCard","actions","erc721Status","Card","CardContent","Typography","component","fontWeight","undefined","isAdminLocked","isOwnerLocked","CardActions","map","index","value","disclaimer","key","color","App","tokenId","accounts","contract","bankBalance","ownerBalance","ERC721ContractAddress","isBankAdmin","isERC721Owner","deployedNetworkIds","bankAddress","nftAddress","BankContract","networks","NFTContract","eth","getAccounts","net","getId","networkId","BankInstance","Contract","abi","NFTInstance","methods","_owner","call","bankAdminAddress","nftOwnerAddress","ownerOf","error","newState","alert","getERC721Owner","utils","isAddress","result","ownerAddress","getERC721BalanceOf","ERC721Instance","ERC721Contract","balanceOf","handleTokenIdInput","event","Number","target","updateNFTBankStatus","handleERC721ContractAddress","mintToken","owner","send","from","gas","mintResponse","withdraw","safeTransferFrom","_address","bankResponse","deposit","safeTransferResponse","updateTokenCount","getIsAdminLocked","getIsOwnerLocked","erc721Owner","lockUnlock","contractMethod","lockUnlockResponse","ownerLock","ownerUnlock","adminLock","adminUnlock","adminCollateralize","to","adminCollateralizeResponse","AccountCardProps","NFTCardProps","BankCardProps","filter","Boolean","AdminCardProps","minDeviceWidth","TextField","label","marginRight","InputLabelProps","shrink","onChange","marginLeft","width","justify","spacing","maxDeviceWidth","marginTop","textAlign","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c179de06.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nclass ButtonAppBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      open: false\n    };\n  }\n\n  handleScroll = () => {\n    if (\n      document.body.scrollTop > 10 ||\n      document.documentElement.scrollTop > 10\n    ) {\n      var styleHold = document.getElementById(\"nav\");\n      styleHold.style.background = \"white\";\n      styleHold.style.paddingTop = \"15px\";\n    } else {\n      var styleHold1 = document.getElementById(\"nav\");\n      styleHold1.style.background = \"transparent\";\n      styleHold1.style.paddingTop = \"15px\";\n    }\n  };\n\n  componentDidMount = () => {\n    // console.log(document.getElementById(\"wallet\"));\n    window.addEventListener(\"scroll\", this.handleScroll);\n    var doc = document.getElementById(\"wallet\").textContent;\n    var str = doc.match(/.{1,6}/g);\n    var fin = str[0] + \"...\" + str[str.length - 1];\n    document.getElementById(\"wallet\").textContent = fin;\n  };\n  handleOpen = () => {\n    this.setState({\n      open: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  };\n  render() {\n    const { address, balance } = this.props;\n    return (\n      <div>\n        <AppBar\n          id=\"nav\"\n          position=\"fixed\"\n          style={{ background: \"none\", boxShadow: \"none\" }}\n        >\n          <Toolbar>\n            <Grid container>\n              <Grid item xs={6}>\n                <Button\n                  variant=\"outlined\"\n                  className=\"buttonStyle1\"\n                  id=\"wallet\"\n                  onClick={this.handleOpen}\n                >\n                  {address}\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <img\n                  src=\"LogoRocket.png\"\n                  alt=\"ok\"\n                  className=\"imgStyle1\"\n                  style={{ height: \"35px\" }}\n                />\n              </Grid>\n            </Grid>\n          </Toolbar>\n        </AppBar>\n        <Dialog\n          onClose={this.handleClose}\n          aria-labelledby=\"simple-dialog-title\"\n          open={this.state.open}\n        >\n          <div className=\"divStyle1\" style={{ padding: \"20px\" }}>\n            <p className=\"spanStyle1\">Address:</p>\n            <p className=\"pStyle4\">{address}</p>\n            <p className=\"spanStyle1\">Balance: </p>\n            <p className=\"pStyle2\">{balance}</p>\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default ButtonAppBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles({\n  card: {\n    minWidth: 275\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  }\n});\n\nexport default function OutlinedCard({\n  title,\n  address,\n  balance,\n  actions,\n  erc721Status\n}) {\n  const classes = useStyles();\n\n  return (\n    <Card className=\"card\" variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\" style={{ fontWeight: 450 }}>\n          {title}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Address\n          <br />\n          {address}\n        </Typography>\n        {balance !== undefined ? (\n          <Typography variant=\"body2\" component=\"p\">\n            Balance\n            <br />\n            {balance}\n          </Typography>\n        ) : null}\n        {erc721Status !== undefined ? (\n          <Typography variant=\"body2\" component=\"p\">\n            Admin Status : {erc721Status.isAdminLocked ? \"locked\" : \"unlocked\"}\n            <br />\n            NFT owner Status :{\" \"}\n            {erc721Status.isOwnerLocked ? \"locked\" : \"unlocked\"}\n          </Typography>\n        ) : null}\n      </CardContent>\n      <CardActions>\n        {actions &&\n          actions.map(({ value, disclaimer, ...props }, index) => {\n            return (\n              // <div style={{ padding: 10 }}>\n              <Grid container style={{ padding: 10 }}>\n                <Grid item xs={12}>\n                  <Button\n                    key={index}\n                    {...props}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    {value}\n                  </Button>\n                </Grid>\n                <Typography variant=\"caption\" component=\"p\">\n                  {disclaimer}\n                </Typography>\n              </Grid>\n            );\n          })}\n      </CardActions>\n    </Card>\n  );\n}\n","import React, { Component } from \"react\";\nimport BankContract from \"./contracts/bank.json\";\nimport NFTContract from \"./contracts/NFToken.json\";\nimport ERC721Contract from \"./contracts/ERC721.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ButtonAppBar from \"./components/Nav2\";\nimport MediaQuery from \"react-responsive\";\nimport \"./App.css\";\nimport Card from \"./components/Card\";\n\nconst gas = 5000000;\nconst ROPSTEN = 3; // network id\n\nclass App extends Component {\n  state = {\n    tokenId: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    bankBalance: 0,\n    ownerBalance: 0,\n    ERC721ContractAddress: null,\n    isAdminLocked: false,\n    isOwnerLocked: false,\n    isBankAdmin: false,\n    isERC721Owner: false\n  };\n\n  deployedNetworkIds = id => {\n    if (ROPSTEN === id) {\n      return {\n        bankAddress: \"0xDC8f79324b4f40c5c93A0D6969FFd204C0650C11\",\n        nftAddress: \"0xfeca45c514F52e43d0171b4a755EDB5f2E6AF445\"\n      };\n    } else {\n      return {\n        bankAddress: BankContract.networks[id].address,\n        nftAddress: NFTContract.networks[id].address\n      };\n    }\n  };\n  /**\n   * Instanciate new contracts like Dummy NFT & BANK\n   */\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const bankAddress = this.deployedNetworkIds(networkId).bankAddress;\n      console.log(bankAddress);\n      const nftAddress = this.deployedNetworkIds(networkId).nftAddress;\n\n      const BankInstance = new web3.eth.Contract(BankContract.abi, bankAddress);\n      const NFTInstance = new web3.eth.Contract(NFTContract.abi, nftAddress);\n\n      const bankAdminAddress = await BankInstance.methods._owner().call();\n      const isBankAdmin = bankAdminAddress === accounts[0];\n\n      let nftOwnerAddress = \"\";\n      try {\n        nftOwnerAddress = await BankInstance.methods\n          .ownerOf(nftAddress, this.state.tokenId)\n          .call();\n      } catch (error) {\n        console.log({ error });\n      }\n      const isERC721Owner = nftOwnerAddress === accounts[0];\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      const newState = {\n        web3,\n        accounts,\n        BankInstance,\n        NFTInstance,\n        ERC721ContractAddress: nftAddress,\n        bankAdminAddress,\n        isBankAdmin,\n        isERC721Owner\n      };\n      console.log(newState);\n      this.setState(newState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  getERC721Owner = async () => {\n    const { web3, BankInstance, ERC721ContractAddress, tokenId } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    let result = null;\n    try {\n      result = await BankInstance.methods\n        .ownerOf(ERC721ContractAddress, tokenId)\n        .call();\n      console.log({ ownerAddress: result, tokenId });\n    } catch (error) {\n      console.log(error);\n    }\n    return result;\n  };\n\n  /**\n   * dynamically fetch how many NFTs current wallet account has\n   */\n  getERC721BalanceOf = async address => {\n    const { web3, ERC721ContractAddress } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress\n    );\n    let result = null;\n    try {\n      result = await ERC721Instance.methods.balanceOf(address).call();\n      console.log({ address, balanceOf: result });\n    } catch (error) {\n      console.log(error);\n    }\n    return result;\n  };\n\n  handleTokenIdInput = event => {\n    this.setState({ tokenId: Number(event.target.value) }, () => {\n      this.updateNFTBankStatus();\n    });\n  };\n\n  handleERC721ContractAddress = event => {\n    this.setState({ ERC721ContractAddress: event.target.value });\n  };\n\n  /**\n   * Example for minting a token for deposit it later in bank\n   */\n  mintToken = async () => {\n    const { NFTInstance, accounts, tokenId } = this.state;\n    const owner = accounts[0];\n    try {\n      const mintResponse = await NFTInstance.methods\n        .mintToken(owner, tokenId)\n        .send({ from: owner, gas });\n      console.log({ mintResponse });\n      // const safeTransferResponse = await ERC721Instance.methods.safeTransferFrom(owner, BankInstance._address, tokenId).send({ from: owner })\n      // console.log({safeTransferResponse})\n    } catch (error) {\n      console.log(error);\n    }\n    this.updateNFTBankStatus();\n  };\n\n  /**\n   * Withdraw NFT token from bank contract\n   */\n  withdraw = async () => {\n    const {\n      BankInstance,\n      accounts,\n      tokenId,\n      web3,\n      ERC721ContractAddress\n    } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const owner = accounts[0];\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress\n    );\n    const bankResponse = await BankInstance.methods\n      .safeTransferFrom(ERC721Instance._address, owner, owner, tokenId, \"0x0a\")\n      .send({ from: owner, gas });\n    console.log({ bankResponse });\n\n    this.updateNFTBankStatus();\n  };\n\n  /**\n   * Bank deposit NFT token from provided contract address\n   */\n  deposit = async () => {\n    const {\n      BankInstance,\n      accounts,\n      tokenId,\n      web3,\n      ERC721ContractAddress\n    } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const owner = accounts[0];\n    const ERC721Instance = new web3.eth.Contract(\n      ERC721Contract.abi,\n      ERC721ContractAddress\n    );\n    const safeTransferResponse = await ERC721Instance.methods\n      .safeTransferFrom(owner, BankInstance._address, tokenId)\n      .send({ from: owner, gas });\n    console.log({ safeTransferResponse });\n\n    this.updateNFTBankStatus();\n  };\n\n  /**\n   * Update UI balance number\n   */\n  updateTokenCount = async () => {\n    const { BankInstance, accounts } = this.state;\n    const owner = accounts[0];\n    const bankBalance = await this.getERC721BalanceOf(BankInstance._address);\n    const ownerBalance = await this.getERC721BalanceOf(owner);\n    console.log({ bankBalance, ownerBalance });\n    this.setState({ bankBalance, ownerBalance });\n  };\n\n  /**\n   * SC Bank - check if admin locked\n   */\n  getIsAdminLocked = async () => {\n    const { BankInstance, tokenId, web3, ERC721ContractAddress } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const isAdminLocked = await BankInstance.methods\n      .isAdminLocked(ERC721ContractAddress, tokenId)\n      .call();\n    console.log({ isAdminLocked, tokenId });\n    return isAdminLocked;\n  };\n\n  /**\n   * SC Bank - check if owneer locked\n   */\n  getIsOwnerLocked = async () => {\n    const { BankInstance, tokenId, web3, ERC721ContractAddress } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const isOwnerLocked = await BankInstance.methods\n      .isOwnerLocked(ERC721ContractAddress, tokenId)\n      .call();\n    console.log({ isOwnerLocked, tokenId });\n    return isOwnerLocked;\n  };\n\n  updateNFTBankStatus = async () => {\n    this.updateTokenCount();\n    const isAdminLocked = await this.getIsAdminLocked();\n    const isOwnerLocked = await this.getIsOwnerLocked();\n    const erc721Owner = await this.getERC721Owner();\n    const isERC721Owner = erc721Owner === this.state.accounts[0];\n\n    this.setState({ isAdminLocked, isOwnerLocked, isERC721Owner });\n  };\n\n  /**\n   * Refactored function to call a Bank method. only works for lock & unlock features\n   */\n  lockUnlock = async contractMethod => {\n    const { accounts, tokenId, web3, ERC721ContractAddress } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const owner = accounts[0];\n    const lockUnlockResponse = await contractMethod(\n      ERC721ContractAddress,\n      tokenId\n    ).send({ from: owner, gas });\n    console.log({ lockUnlockResponse });\n  };\n\n  /**\n   * New owner lock token feature\n   * - owner locks\n   * - later admin locks\n   */\n  ownerLock = async () => {\n    const { BankInstance } = this.state;\n    await this.lockUnlock(BankInstance.methods.ownerLock);\n    this.updateNFTBankStatus();\n  };\n\n  ownerUnlock = async () => {\n    const { BankInstance } = this.state;\n    await this.lockUnlock(BankInstance.methods.ownerUnlock);\n    this.updateNFTBankStatus();\n  };\n\n  /**\n   * New admin lock token feature\n   * - owner locks\n   * - later admin locks\n   */\n  adminLock = async () => {\n    const { BankInstance } = this.state;\n    await this.lockUnlock(BankInstance.methods.adminLock);\n    this.updateNFTBankStatus();\n  };\n\n  adminUnlock = async () => {\n    const { BankInstance } = this.state;\n    await this.lockUnlock(BankInstance.methods.adminUnlock);\n    this.updateNFTBankStatus();\n  };\n\n  /**\n   * With this SC bank admin can withdraw NFTs in case of defaulting\n   */\n  adminCollateralize = async to => {\n    const {\n      accounts,\n      BankInstance,\n      tokenId,\n      web3,\n      ERC721ContractAddress\n    } = this.state;\n    if (!web3.utils.isAddress(ERC721ContractAddress)) {\n      alert(\"Invalid address \" + ERC721ContractAddress);\n      return;\n    }\n\n    const owner = accounts[0];\n    const adminCollateralizeResponse = await BankInstance.methods\n      .adminCollateralize(ERC721ContractAddress, to, tokenId, \"0x0a\")\n      .send({ from: owner, gas });\n    console.log({ adminCollateralizeResponse });\n    this.updateNFTBankStatus();\n  };\n\n  render() {\n    const {\n      web3,\n      tokenId,\n      isAdminLocked,\n      isOwnerLocked,\n      bankAdminAddress,\n      isBankAdmin,\n      isERC721Owner\n    } = this.state;\n    if (!web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    const AccountCardProps = {\n      title: \"Personal Wallet\",\n      address: this.state.accounts[0],\n      balance: this.state.ownerBalance\n    };\n    const NFTCardProps = {\n      title: \"Dummy NFT(ERC721) Contract\",\n      address: this.state.NFTInstance._address,\n      actions: [\n        {\n          value: \"Mint token\",\n          onClick: this.mintToken\n        }\n      ]\n    };\n\n    const BankCardProps = {\n      title: \"Rocket Contract\",\n      address: this.state.BankInstance._address,\n      balance: this.state.bankBalance,\n      erc721Status: { isAdminLocked, isOwnerLocked },\n      actions: [\n        {\n          value: \"Deposit\",\n          onClick: this.deposit\n        },\n        {\n          value: \"Withdraw\",\n          onClick: this.withdraw\n        },\n        isERC721Owner\n          ? {\n              value: isOwnerLocked\n                ? `Cancel loan process Id: ${tokenId}`\n                : `Start a loan process Id: ${tokenId}`,\n              disclaimer: isOwnerLocked\n                ? \"\"\n                : \"by clicking this button, you agree to lock your NFT(s)\",\n              onClick: isOwnerLocked ? this.ownerUnlock : this.ownerLock\n            }\n          : null\n      ].filter(Boolean)\n    };\n\n    const AdminCardProps = {\n      title: \"Rocket Admin\",\n      address: bankAdminAddress,\n      actions: [\n        {\n          value: isAdminLocked\n            ? `Admin Unlock Id: ${tokenId}`\n            : `Admin lock Id: ${tokenId}`,\n          onClick: isAdminLocked ? this.adminUnlock : this.adminLock\n        }\n      ]\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"bg\">\n          <ButtonAppBar {...AccountCardProps} />\n          <MediaQuery minDeviceWidth={1001}>\n            <div className=\"divTrans\">\n              <Grid container className=\"gridContainer\">\n                <Grid item xs={12}>\n                  <h2>MVP Rocket</h2>\n                </Grid>\n                <Grid item xs={12}>\n                  <p className=\"pStyle1\">\n                    Rocket Alpha Testnet (please switch to Ropsten) <br />\n                    Start a loan process by depositing NFTs In this version, you\n                    can try depositing a NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p className=\"pStyle2\">\n                    <span className=\"spanStyle1\">1.</span> Since you likely do\n                    not have any testnet NFT, you can mint one below in our\n                    <br />\n                    <span className=\"spanStyle1\">“Dummy NFT Contract”</span>.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p className=\"pStyle2\">\n                    <span className=\"spanStyle1\">2.</span> Then, you can deposit\n                    them.\n                    <br /> At this stage, they are still fully yours: we cannot\n                    seize them.\n                    <br />\n                    What you can do now is{\" \"}\n                    <span className=\"spanStyle1\">Start a loan</span>{\" \"}\n                    application, which locks your NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p className=\"pStyle2\">\n                    <span className=\"spanStyle1\">3.</span> Until we agree on\n                    terms and lock it on our side, you are free to Withdraw\n                    them.\n                  </p>\n                </Grid>\n              </Grid>\n              <p className=\"pStyle3\">Thats It!</p>\n              <TextField\n                id=\"filled-full-width\"\n                label=\"Token ID\"\n                className=\"textField1\"\n                style={{ marginRight: \"10px\" }}\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleTokenIdInput}\n                value={this.state.tokenId}\n              />\n              <TextField\n                id=\"filled-full-width\"\n                className=\"textField1\"\n                label=\"ERC721 Contract Address\"\n                margin=\"normal\"\n                style={{ marginLeft: \"10px\" }}\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleERC721ContractAddress}\n                value={this.state.ERC721ContractAddress}\n              />\n              <Grid style={{width: '100%'}} container justify=\"center\" spacing={2}>\n                <Grid item>\n                  <Card {...NFTCardProps} />\n                </Grid>\n                <Grid item>\n                  <Card {...BankCardProps} />\n                </Grid>\n                {isBankAdmin ? (\n                  <Grid item>\n                    <Card {...AdminCardProps} />\n                  </Grid>\n                ) : null}\n              </Grid>\n            </div>\n          </MediaQuery>\n          <MediaQuery minDeviceWidth={476} maxDeviceWidth={1000}>\n            <div style={{ marginTop: \"15%\" }} className=\"divTrans\">\n              <Grid container className=\"gridContainer\">\n                <Grid item xs={12}>\n                  <h2>MVP Rocket</h2>\n                </Grid>\n                <Grid item xs={12}>\n                  <p style={{ fontWeight: 700, textAlign: \"center\" }}>\n                    Rocket Alpha Testnet (please switch to Ropsten) <br />\n                    Start a loan process by depositing NFTs In this version, you\n                    can try depositing a NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">1.</span> Since you likely do\n                    not have any testnet NFT,\n                    <br /> you can mint one below in our\n                    <br />\n                    <span className=\"spanStyle1\">“Dummy NFT Contract”</span>.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">2.</span> Then, you can deposit\n                    them.\n                    <br /> At this stage, they are still fully yours: we cannot\n                    seize them.\n                    <br />\n                    What you can do now is{\" \"}\n                    <span className=\"spanStyle1\">Start a loan</span>{\" \"}\n                    application, which locks your NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">3.</span> Until we agree on\n                    terms and lock it on our side, <br />\n                    you are free to Withdraw them.\n                  </p>\n                </Grid>\n              </Grid>\n              <p style={{ fontWeight: 700, marginBottom: \"3%\" }}>Thats It!</p>\n              <TextField\n                id=\"filled-full-width\"\n                label=\"Token ID\"\n                className=\"textField1\"\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleTokenIdInput}\n                value={this.state.tokenId}\n              />\n              <TextField\n                id=\"filled-full-width\"\n                className=\"textField1\"\n                label=\"ERC721 Contract Address\"\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleERC721ContractAddress}\n                value={this.state.ERC721ContractAddress}\n              />\n              <Grid\n                container\n                justify=\"center\"\n                spacing={2}\n                className=\"gridStyle1\"\n              >\n                <Grid item>\n                  <Card {...NFTCardProps} />\n                </Grid>\n                <Grid item>\n                  <Card {...BankCardProps} />\n                </Grid>\n                {isBankAdmin ? (\n                  <Grid item>\n                    <Card {...AdminCardProps} />\n                  </Grid>\n                ) : null}\n              </Grid>\n            </div>\n          </MediaQuery>\n          <MediaQuery maxDeviceWidth={475}>\n            <div style={{ marginTop: \"20%\" }} className=\"divTrans\">\n              <Grid container className=\"gridContainer\">\n                <Grid item xs={12}>\n                  <h2>MVP Rocket</h2>\n                </Grid>\n                <Grid item xs={12}>\n                  <p style={{ fontWeight: 700, textAlign: \"center\" }}>\n                    Rocket Alpha Testnet (please switch to Ropsten) <br />\n                    Start a loan process by depositing NFTs In this version, you\n                    can try depositing a NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">1.</span> Since you likely do\n                    not have any testnet NFT,\n                    <br /> you can mint one below in our\n                    <br />\n                    <span className=\"spanStyle1\">“Dummy NFT Contract”</span>.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">2.</span> Then, you can deposit\n                    them.\n                    <br /> At this stage, they are still fully yours: we cannot\n                    seize them.\n                    <br />\n                    What you can do now is{\" \"}\n                    <span className=\"spanStyle1\">Start a loan</span>{\" \"}\n                    application, which locks your NFT.\n                  </p>\n                </Grid>\n                <Grid item xs={4}>\n                  <p style={{ fontWeight: 500 }}>\n                    <span className=\"spanStyle1\">3.</span> Until we agree on\n                    terms and lock it on our side, <br />\n                    you are free to Withdraw them.\n                  </p>\n                </Grid>\n              </Grid>\n              <p style={{ fontWeight: 700, marginBottom: \"3%\" }}>Thats It!</p>\n\n              <TextField\n                id=\"filled-full-width\"\n                label=\"Token ID\"\n                className=\"textField1\"\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleTokenIdInput}\n                value={this.state.tokenId}\n              />\n              <TextField\n                id=\"filled-full-width\"\n                className=\"textField1\"\n                label=\"ERC721 Contract Address\"\n                margin=\"normal\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n                variant=\"outlined\"\n                onChange={this.handleERC721ContractAddress}\n                value={this.state.ERC721ContractAddress}\n              />\n              <Grid\n                container\n                justify=\"center\"\n                spacing={2}\n                className=\"gridStyle1\"\n              >\n                <Grid item>\n                  <Card {...NFTCardProps} />\n                </Grid>\n                <Grid item>\n                  <Card {...BankCardProps} />\n                </Grid>\n                {isBankAdmin ? (\n                  <Grid item>\n                    <Card {...AdminCardProps} />\n                  </Grid>\n                ) : null}\n              </Grid>\n            </div>\n          </MediaQuery>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}